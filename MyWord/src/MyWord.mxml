<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   applicationComplete="init2()" applicationDPI="160" creationComplete="init()"
			   currentState="landscape"
			   backgroundColor.landscape="#5E4B4B">
	
	<fx:Style source="MyWord.css"/>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import flash.display.Stage;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import flash.events.Event;
			
			[Bindable]
			private var accounts:ArrayList;
			
			protected function init():void{
				createDb();
				fillSpinner();
			}
			
			protected function init2():void{
				stage.addEventListener( StageOrientationEvent.ORIENTATION_CHANGE,
					onOrientationChange );
				if (stage.orientation == StageOrientation.ROTATED_LEFT || 
					stage.orientation == StageOrientation.ROTATED_RIGHT){
					this.currentState = "portrate";
				}
				else if (stage.orientation == StageOrientation.UPSIDE_DOWN || 
					stage.orientation == StageOrientation.DEFAULT){
					this.currentState = "landscape";
				}
			}
			
			protected function onOrientationChange(event:StageOrientationEvent):void{
				if (event.afterOrientation == StageOrientation.ROTATED_LEFT){
					this.currentState = "portrate";
				}
				else if (event.afterOrientation == StageOrientation.ROTATED_RIGHT){
					this.currentState = "portrate";
				}
				else if (event.afterOrientation == StageOrientation.UPSIDE_DOWN){
					this.currentState = "landscape";
				}
				else if (event.afterOrientation == StageOrientation.DEFAULT){
					this.currentState = "landscape";
				}
			}
			
			protected function createDb():void
			{
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("Storage1.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = 
					"CREATE TABLE IF NOT EXISTS keys (" +
					"id INTEGER PRIMARY KEY, " +
					"description STRING, " + 
					"num1 INTEGER, " +
					"num2 INTEGER, " +
					"num3 INTEGER, " +
					"num4 INTEGER, " +
					"num5 INTEGER, " +
					"num6 INTEGER, " +
					"num7 INTEGER, " +
					"num8 INTEGER, " +
					"num9 INTEGER, " +
					"num10 INTEGER, " +
					"num11 INTEGER, " +
					"num12 INTEGER, " +
					"num13 INTEGER, " +
					"num14 INTEGER, " +
					"num15 INTEGER," +
					"UNIQUE (description))";
				stmt.execute();
				stmt.text = 
					"INSERT INTO keys (description, num1, num2, num3, num4, num5, " +
					"num6, num7, num8, num9, num10, num11, num12, num13, num14, num15) VALUES (" +
					"'Sample'," + 
					"021, " +
					"234, " +
					"231, " +
					"412, " +
					"102, " +
					"410, " +
					"011, " +
					"942, " +
					"462, " +
					"764, " +
					"021, " +
					"234, " +
					"231, " +
					"412, " +
					"102)";
				stmt.execute();
			}
			
			protected function fillSpinner():void
			{
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("Storage1.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT * FROM keys";
				stmt.execute();
				var result:Array = stmt.getResult().data;
				var dataArray:Array;
				if (null == result)
				{
					accounts = new ArrayList();
				}
				else
				{
					dataArray = new Array(result.length);
					var currentRow:Object = new Object;
					for (var i:int = 0; i < result.length; i++) 
					{
						currentRow = result[i];
						dataArray[i] = {name:currentRow["description"], i:i+1};
					}
					
					accounts = new ArrayList(dataArray);
				}

			}
			
			protected function getData(description:String):Array
			{
				var dataArray:Array = new Array(11);
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("Storage1.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT * FROM keys WHERE description = '"+ description+"'";
				stmt.execute();
				var result:Array = stmt.getResult().data;
				
				var currentRow:Object = result[0];
				dataArray[0] = currentRow["description"];
				for (var i:int = 1; i < 16; i++) 
				{
					dataArray[i] = currentRow["num"+i];
				}
				
				return dataArray;
			}
			protected function convert():void
			{
				if(Input.text.length > 15)
				{
					Input.text = Input.text.substr(0,15);
					MessageLabel.text = "Maximum letters is 15, letters used: " + Input.text;
					Output.text = convertWord(Service.selectedItem.name, Input.text);
				}
				else
				{
					
					Output.text = convertWord(Service.selectedItem.name,Input.text);
					MessageLabel.text = "Letters to convert: " + Input.text;
				}
			}
			protected function spinnerlist1_changeHandler(event:IndexChangeEvent):void
			{
				convert();
			}
			
			protected function convertWord(description:String, oldWord:String):String
			{
				var shift:int;
				var newWord:String = new String();
				var accountData:Array = getData(description);
				
				for (var i:int = 0; i < oldWord.length && i < 15; i++) 
				{
					shift = accountData[i + 1];
					newWord += convertLetter(oldWord.substr(i,1),shift);
				}
				return newWord;
			}
			
			protected function convertLetter(oldLetter:String, shiftVal:int):String
			{
				var newLetter:String = new String();
				var modChar:int;
				var newChar:int = oldLetter.charCodeAt(0) + shiftVal;
				
				//check if newChar is greater then 1000
				if (newChar > 999)
				{
					newChar -= 1000;
				}
				
				modChar = newChar % 62;
				
				if (modChar >= 0 && modChar <= 9)
				{
					newLetter = String.fromCharCode(modChar + 48);
				}
				else if (modChar >= 10 && modChar <= 35)
				{
					newLetter = String.fromCharCode(modChar + 55);
				}
				else if (modChar >= 36 && modChar <= 61)
				{
					newLetter = String.fromCharCode(modChar + 61);
				}
				else
				{
					newLetter = "System Error";
				}
				
				return newLetter;
			}
			
			protected function Input_changeHandler(event:TextOperationEvent):void
			{
				convert();
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				var nums:Array = new Array(15);
				for (var i:int = 0; i < 15; i++) 
				{
					nums[i] = Math.floor(Math.random() * (1 + 999 - 1)) + 1;
				}
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("Storage1.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;	
				stmt.text = 
					"INSERT INTO keys (description, num1, num2, num3, num4, num5, " +
					"num6, num7, num8, num9, num10, num11, num12, num13, num14, num15) VALUES (" +
					"'"+cInput.text+"'," + 
					int(nums[0])+", " + int(nums[1])+", "+
					int(nums[2])+", " + int(nums[3])+", "+
					int(nums[4])+", " + int(nums[5])+", "+
					int(nums[6])+", " + int(nums[7])+", "+
					int(nums[8])+", " + int(nums[9])+", "+
					int(nums[10])+", " + int(nums[11])+", "+
					int(nums[12])+", " + int(nums[13])+", "+
					int(nums[14])+")";
				try
				{
				stmt.execute();
				CreationLabel.text = "Service created.";
				}
				catch (e:SQLError)
				{
				CreationLabel.text = "Service already exists.";
				}
				cInput.text = "";
				fillSpinner();
				}

			protected function button5_clickHandler(event:MouseEvent):void
			{
				try
				{
				deleteService(Service.selectedItem.name);
				MessageLabel.text = "Service deleted.";
				convert();
				}
				catch (e:TypeError)
				{
					MessageLabel.text = "All services have been deleted.";
					Output.text = "";
					Input.text = "";
					fillSpinner();
				}
			}
			protected function deleteService(description:String):void
			{
				var accountID:int;
				var sqlConnection:SQLConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("Storage1.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DELETE FROM keys WHERE description = '"+ description+"'";	
				stmt.execute();
				fillSpinner();
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="landscape"/>
		<s:State name="portrate"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:SpinnerListContainer x="37" y="142" width="384" height="343">
		<s:SpinnerList id="Service" width="382" height="100%" change="spinnerlist1_changeHandler(event)"
					   dataProvider="{accounts}" itemRenderer="renderers.MySpinnerListRenderer"
					   labelField="name"/>
	</s:SpinnerListContainer>
	<s:TextInput id="Input" x="75" y="82" change="Input_changeHandler(event)"
				 x.landscape="37" width.landscape="384"/>
	<s:Label id="Output" x="37" y="493" width="385"/>
	<s:Label id="MessageLabel" x="37" y="524" width="385"/>
	<s:Button x="429" y="290" label="Delete" click="button5_clickHandler(event)"/>
	<s:Button x="684" y="93" width="93" label="Add" click="button3_clickHandler(event)"
			  x.landscape="714" y.landscape="229"
			  x.portrate="178" y.portrate="597"/>
	<s:TextInput id="cInput" x="581" y="144"
				 x.landscape="611" y.landscape="280"
				 x.portrate="75" y.portrate="648"/>
	<s:Label id="CreationLabel" x="581" y="193" width="300"
			 x.landscape="611" y.landscape="329"
			 x.portrate="75" y.portrate="697"/>
</s:Application>
